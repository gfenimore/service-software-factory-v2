# Progressive Processor Configuration
# Version: 1.0
# Purpose: Define how each processor operates in different lines
# Key Feature: Each processor builds on outputs from previous lines

processors:
  # ============================================
  # TYPE-PROCESSOR
  # ============================================
  TYPE-PROCESSOR:
    version: 2.0
    description: "Generates TypeScript types with progressive sophistication"
    
    modes:
      concept:
        command: "type-processor --mode=concept"
        configuration:
          allows_any: true
          validation: "none"
          strict_mode: false
          nullable_by_default: true
        input:
          source: "mock-data"
          format: "json"
        output:
          files:
            - "concept.types.ts"
          features:
            - "Basic interfaces"
            - "Optional everything"
            - "Any types allowed"
        example: |
          // concept.types.ts
          export interface ServiceLocation {
            id?: any;
            name?: string;
            address?: any;
            data?: any; // Flexible for mocking
          }
        
      prototype:
        command: "type-processor --mode=prototype --input=concept.types.ts"
        configuration:
          allows_any: false
          validation: "typescript"
          strict_mode: true
          nullable_by_default: false
        input:
          source: "concept.types.ts"
          enhances: true
        output:
          files:
            - "strict.types.ts"
            - "validation.schemas.ts"
          features:
            - "Strict types"
            - "Zod schemas"
            - "No any types"
            - "Proper nullability"
        example: |
          // strict.types.ts
          export interface ServiceLocation {
            id: string;
            name: string;
            address: Address;
            accountId: string;
            status: 'active' | 'inactive';
          }
        
      production:
        command: "type-processor --mode=production --input=strict.types.ts"
        configuration:
          allows_any: "error"
          validation: "zod"
          branded_types: true
          runtime_guards: true
        input:
          source: "strict.types.ts"
          enhances: true
        output:
          files:
            - "branded.types.ts"
            - "guards.ts"
            - "schemas.ts"
            - "validators.ts"
          features:
            - "Branded types"
            - "Runtime guards"
            - "Full validation"
            - "Type predicates"
        example: |
          // branded.types.ts
          export type ServiceLocationId = string & { __brand: 'ServiceLocationId' };
          export type AccountId = string & { __brand: 'AccountId' };
          
          export interface ServiceLocation {
            id: ServiceLocationId;
            name: NonEmptyString;
            address: ValidatedAddress;
            accountId: AccountId;
            status: ServiceLocationStatus;
            tenantId: TenantId;
          }

  # ============================================
  # SCAFFOLD-PROCESSOR
  # ============================================
  SCAFFOLD-PROCESSOR:
    version: 2.0
    description: "Creates component scaffolds with progressive complexity"
    
    modes:
      concept:
        command: "scaffold-processor --mode=concept"
        template: "mock-component"
        configuration:
          state_management: "useState"
          error_handling: false
          loading_states: false
          accessibility: false
        includes:
          - "Basic structure"
          - "Mock data"
          - "Local state"
        output:
          pattern: "src/concept/[name].tsx"
        example: |
          // ServiceLocationCard.tsx (concept)
          export const ServiceLocationCard = ({ location, onSelect }) => {
            return (
              <div onClick={() => onSelect(location)}>
                <h3>{location.name}</h3>
                <p>{location.address}</p>
              </div>
            );
          };
        
      prototype:
        command: "scaffold-processor --mode=prototype --enhance"
        template: "standard-component"
        configuration:
          state_management: "hooks"
          error_handling: true
          loading_states: true
          accessibility: true
        includes:
          - "Props interface"
          - "Error handling"
          - "Loading states"
          - "Basic accessibility"
        input:
          enhances: "concept-scaffold"
        output:
          pattern: "src/prototype/[name].tsx"
        example: |
          // ServiceLocationCard.tsx (prototype)
          interface ServiceLocationCardProps {
            location: ServiceLocation;
            onSelect: (id: string) => void;
            isSelected?: boolean;
            isLoading?: boolean;
          }
          
          export const ServiceLocationCard: FC<ServiceLocationCardProps> = ({ 
            location, 
            onSelect, 
            isSelected, 
            isLoading 
          }) => {
            if (isLoading) return <CardSkeleton />;
            
            return (
              <Card
                onClick={() => onSelect(location.id)}
                role="button"
                aria-pressed={isSelected}
                tabIndex={0}
              >
                <CardHeader>{location.name}</CardHeader>
                <CardBody>{location.address}</CardBody>
              </Card>
            );
          };
        
      production:
        command: "scaffold-processor --mode=production --enhance"
        template: "enterprise-component"
        configuration:
          state_management: "context"
          error_handling: "boundary"
          loading_states: "suspense"
          accessibility: "wcag-2.1"
          monitoring: true
        includes:
          - "Error boundaries"
          - "Performance monitoring"
          - "Full accessibility"
          - "Memoization"
          - "Telemetry"
        input:
          enhances: "prototype-scaffold"
        output:
          pattern: "src/production/[name].tsx"
        example: |
          // ServiceLocationCard.tsx (production)
          const ServiceLocationCard = memo<ServiceLocationCardProps>(({ 
            location, 
            onSelect, 
            isSelected, 
            isLoading 
          }) => {
            useEffect(() => {
              metrics.componentMount('ServiceLocationCard');
            }, []);
            
            const handleSelect = useCallback(() => {
              metrics.track('location.selected', { id: location.id });
              onSelect(location.id);
            }, [location.id, onSelect]);
            
            return (
              <ErrorBoundary fallback={<CardError />}>
                <Card
                  onClick={handleSelect}
                  role="button"
                  aria-label={`Select ${location.name}`}
                  aria-pressed={isSelected}
                  data-testid="service-location-card"
                >
                  {/* Full implementation */}
                </Card>
              </ErrorBoundary>
            );
          });

  # ============================================
  # REACT-PROCESSOR
  # ============================================
  REACT-PROCESSOR:
    version: 2.0
    description: "Adds React logic with progressive sophistication"
    
    modes:
      concept:
        command: "react-processor --mode=concept"
        features:
          - "useState hooks"
          - "Basic handlers"
          - "Console.log debugging"
        skip:
          - "Error handling"
          - "Optimization"
          - "Type safety"
        
      prototype:
        command: "react-processor --mode=prototype"
        features:
          - "Custom hooks"
          - "Error handling"
          - "Loading states"
          - "Form validation"
        includes:
          - "useEffect"
          - "useCallback"
          - "Error states"
        
      production:
        command: "react-processor --mode=production"
        features:
          - "Performance optimization"
          - "Error boundaries"
          - "Suspense"
          - "Memoization"
          - "Concurrent features"
        includes:
          - "useMemo"
          - "useTransition"
          - "Error recovery"
          - "Telemetry hooks"

  # ============================================
  # HOOK-PROCESSOR
  # ============================================
  HOOK-PROCESSOR:
    version: 2.0
    description: "Generates custom hooks with progressive features"
    
    modes:
      concept:
        command: "hook-processor --mode=concept"
        template: "mock-hook"
        features:
          - "Return mock data"
          - "Simulate delays"
        output: |
          // useServiceLocations.ts (concept)
          export const useServiceLocations = (accountId) => {
            const [loading, setLoading] = useState(true);
            
            useEffect(() => {
              setTimeout(() => setLoading(false), 500);
            }, []);
            
            return {
              data: MOCK_LOCATIONS,
              loading,
              error: null
            };
          };
        
      prototype:
        command: "hook-processor --mode=prototype"
        template: "data-hook"
        features:
          - "Real API calls"
          - "Error handling"
          - "Loading states"
          - "Basic caching"
        output: |
          // useServiceLocations.ts (prototype)
          export const useServiceLocations = (accountId: string) => {
            const [data, setData] = useState<ServiceLocation[]>([]);
            const [loading, setLoading] = useState(true);
            const [error, setError] = useState<Error | null>(null);
            
            useEffect(() => {
              fetchLocations(accountId)
                .then(setData)
                .catch(setError)
                .finally(() => setLoading(false));
            }, [accountId]);
            
            return { data, loading, error };
          };
        
      production:
        command: "hook-processor --mode=production"
        template: "enterprise-hook"
        features:
          - "SWR/React Query"
          - "Optimistic updates"
          - "Retry logic"
          - "Cache invalidation"
          - "Performance tracking"
        output: |
          // useServiceLocations.ts (production)
          export const useServiceLocations = (accountId: AccountId) => {
            const queryKey = ['locations', accountId];
            
            return useQuery({
              queryKey,
              queryFn: () => fetchLocations(accountId),
              staleTime: 5 * 60 * 1000,
              cacheTime: 10 * 60 * 1000,
              retry: 3,
              retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
              onError: (error) => {
                metrics.track('locations.fetch.error', { error });
                Sentry.captureException(error);
              },
              onSuccess: (data) => {
                metrics.track('locations.fetch.success', { count: data.length });
              }
            });
          };

  # ============================================
  # TEST-PROCESSOR
  # ============================================
  TEST-PROCESSOR:
    version: 2.0
    description: "Generates tests with progressive coverage"
    
    modes:
      concept:
        command: "test-processor --mode=concept"
        test_types:
          - "Smoke tests"
          - "Render tests"
        coverage: 0
        output: |
          // ServiceLocationCard.test.tsx (concept)
          test('renders without crashing', () => {
            render(<ServiceLocationCard location={mockLocation} />);
          });
          
          test('displays location name', () => {
            const { getByText } = render(<ServiceLocationCard location={mockLocation} />);
            expect(getByText(mockLocation.name)).toBeInTheDocument();
          });
        
      prototype:
        command: "test-processor --mode=prototype"
        test_types:
          - "Unit tests"
          - "Integration tests"
          - "Happy path"
        coverage: 60
        output: |
          // ServiceLocationCard.test.tsx (prototype)
          describe('ServiceLocationCard', () => {
            test('handles click events', () => {
              const onSelect = jest.fn();
              const { getByRole } = render(
                <ServiceLocationCard location={location} onSelect={onSelect} />
              );
              fireEvent.click(getByRole('button'));
              expect(onSelect).toHaveBeenCalledWith(location.id);
            });
            
            test('shows loading state', () => {
              const { getByTestId } = render(
                <ServiceLocationCard location={location} isLoading />
              );
              expect(getByTestId('skeleton')).toBeInTheDocument();
            });
          });
        
      production:
        command: "test-processor --mode=production"
        test_types:
          - "Unit tests"
          - "Integration tests"
          - "E2E tests"
          - "Performance tests"
          - "Accessibility tests"
        coverage: 80
        critical_coverage: 95
        output: |
          // ServiceLocationCard.test.tsx (production)
          describe('ServiceLocationCard', () => {
            // Previous tests plus...
            
            test('meets accessibility standards', async () => {
              const { container } = render(<ServiceLocationCard location={location} />);
              const results = await axe(container);
              expect(results).toHaveNoViolations();
            });
            
            test('handles error states gracefully', () => {
              const ProblematicCard = () => {
                throw new Error('Test error');
              };
              
              const { getByText } = render(
                <ErrorBoundary>
                  <ProblematicCard />
                </ErrorBoundary>
              );
              
              expect(getByText(/something went wrong/i)).toBeInTheDocument();
            });
            
            test('performance: renders within 16ms', () => {
              const start = performance.now();
              render(<ServiceLocationCard location={location} />);
              const end = performance.now();
              expect(end - start).toBeLessThan(16);
            });
          });

  # ============================================
  # MODIFY-PROCESSOR
  # ============================================
  MODIFY-PROCESSOR:
    version: 2.0
    description: "Modifies existing code with progressive enhancements"
    
    modes:
      concept:
        operations:
          - "Add mock data"
          - "Add demo routes"
        skip:
          - "Production imports"
          - "Security checks"
        
      prototype:
        operations:
          - "Wire components"
          - "Add routes"
          - "Connect APIs"
        includes:
          - "Import statements"
          - "Basic integration"
        
      production:
        operations:
          - "Add monitoring"
          - "Add security"
          - "Add caching"
          - "Add telemetry"
        includes:
          - "Performance wrappers"
          - "Error boundaries"
          - "Security checks"

# ============================================
# Processor Chain Configuration
# ============================================
chains:
  concept:
    sequence:
      - "MOCK-PROCESSOR"
      - "UI-PROCESSOR"
    parallel: true
    timeout: "5m"
    
  prototype:
    sequence:
      - "TYPE-PROCESSOR"
      - "SCAFFOLD-PROCESSOR"
      - "REACT-PROCESSOR"
      - "HOOK-PROCESSOR"
      - "TEST-PROCESSOR"
    parallel: false
    timeout: "15m"
    
  production:
    sequence:
      - "TYPE-PROCESSOR"
      - "SCAFFOLD-PROCESSOR"
      - "REACT-PROCESSOR"
      - "HOOK-PROCESSOR"
      - "TEST-PROCESSOR"
      - "SECURITY-PROCESSOR"
      - "PERFORMANCE-PROCESSOR"
      - "MODIFY-PROCESSOR"
    parallel: false
    timeout: "30m"

# ============================================
# Processor Communication
# ============================================
communication:
  artifact_passing:
    concept_to_prototype:
      - "Mock structures → Type definitions"
      - "UI components → Scaffold base"
      - "User flows → Test scenarios"
    
    prototype_to_production:
      - "Types → Branded types"
      - "Components → Hardened components"
      - "Tests → Comprehensive tests"
  
  enhancement_tracking:
    enabled: true
    manifest: "processor-evolution.json"
    
# ============================================
# Processor Evolution
# ============================================
evolution:
  pattern_learning:
    enabled: true
    sources:
      - "Production patterns"
      - "Error reports"
      - "Performance metrics"
    
  template_updates:
    frequency: "weekly"
    approval_required: true
    
  version_progression:
    concept_baseline: "1.0"
    prototype_baseline: "2.0"
    production_baseline: "3.0"