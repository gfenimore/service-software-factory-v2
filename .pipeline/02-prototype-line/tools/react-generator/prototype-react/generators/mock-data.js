/**
 * Mock Data Generator
 * Generates TypeScript mock data from configuration
 */

/**
 * Generate mock data module
 * @param {Object} config - Parsed configuration
 * @returns {string} TypeScript mock data module
 */
function generateMockData(config) {
    const { entityNamePascal, componentName, fields } = config;
    
    return `/**
 * Mock Data for ${componentName}
 * Generated by Prototype Line Generator
 * ${new Date().toISOString()}
 */

import { ${entityNamePascal} } from '../types/${componentName}Types';

// Mock data array
export const mock${entityNamePascal}Data: ${entityNamePascal}[] = [
${generateMockRecords(fields, 10)}
];

// Mock data generator function
export function generate${entityNamePascal}(count: number = 10): ${entityNamePascal}[] {
    const data: ${entityNamePascal}[] = [];
    
    for (let i = 0; i < count; i++) {
        data.push({
${fields.map(field => `            ${field.fieldCamel}: ${generateFieldValue(field, 'i')}${field === fields[fields.length - 1] ? '' : ','}`).join('\n')}
        });
    }
    
    return data;
}

// Mock API service (simulates backend)
export const ${entityNamePascal.toLowerCase()}Service = {
    async getAll(): Promise<${entityNamePascal}[]> {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(mock${entityNamePascal}Data);
            }, 500);
        });
    },
    
    async getById(id: string): Promise<${entityNamePascal} | null> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const item = mock${entityNamePascal}Data.find(
                    d => (d as any).id === id || (d as any).${fields[0]?.fieldCamel} === id
                );
                resolve(item || null);
            }, 300);
        });
    },
    
    async create(data: Partial<${entityNamePascal}>): Promise<${entityNamePascal}> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const newItem = { ...data } as ${entityNamePascal};
                mock${entityNamePascal}Data.push(newItem);
                resolve(newItem);
            }, 400);
        });
    },
    
    async update(id: string, data: Partial<${entityNamePascal}>): Promise<${entityNamePascal}> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mock${entityNamePascal}Data.findIndex(
                    d => (d as any).id === id || (d as any).${fields[0]?.fieldCamel} === id
                );
                if (index >= 0) {
                    mock${entityNamePascal}Data[index] = { ...mock${entityNamePascal}Data[index], ...data };
                    resolve(mock${entityNamePascal}Data[index]);
                } else {
                    reject(new Error('Not found'));
                }
            }, 400);
        });
    },
    
    async delete(id: string): Promise<void> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mock${entityNamePascal}Data.findIndex(
                    d => (d as any).id === id || (d as any).${fields[0]?.fieldCamel} === id
                );
                if (index >= 0) {
                    mock${entityNamePascal}Data.splice(index, 1);
                    resolve();
                } else {
                    reject(new Error('Not found'));
                }
            }, 300);
        });
    }
};
`;
}

/**
 * Generate mock records
 */
function generateMockRecords(fields, count) {
    const records = [];
    
    for (let i = 0; i < count; i++) {
        const record = fields.map(field => {
            const value = getMockValue(field, i);
            return `        ${field.fieldCamel}: ${value}`;
        }).join(',\n');
        
        records.push(`    {
${record}
    }`);
    }
    
    return records.join(',\n');
}

/**
 * Generate field value for mock data
 */
function generateFieldValue(field, index) {
    const templates = {
        // Account fields
        'accountName': [`'Company \${${index} + 1}'`, `'Corporation \${${index} + 1}'`, `'Services \${${index} + 1}'`],
        'accountNumber': [`'ACC-\${String(${index} + 1).padStart(3, "0")}'`],
        'accountType': [`${index} % 3 === 0 ? 'Commercial' : ${index} % 3 === 1 ? 'Residential' : 'Industrial'`],
        'status': [`${index} % 4 === 0 ? 'Active' : ${index} % 4 === 1 ? 'Pending' : ${index} % 4 === 2 ? 'On Hold' : 'Inactive'`],
        
        // Service Location fields
        'locationName': [`'Location \${${index} + 1}'`, `'Office \${${index} + 1}'`, `'Site \${${index} + 1}'`],
        'address': [`'\${100 + ${index} * 10} Main Street'`],
        'city': [`${index} % 2 === 0 ? 'Springfield' : 'Riverside'`],
        'state': [`${index} % 2 === 0 ? 'CA' : 'TX'`],
        
        // Generic types
        'string': [`'Value \${${index} + 1}'`],
        'number': [`${index} * 100 + 50`],
        'boolean': [`${index} % 2 === 0`],
        'date': [`new Date(2024, ${index} % 12, ${index} + 1).toISOString()`]
    };
    
    // Try field-specific template first
    if (templates[field.field]) {
        return templates[field.field][0];
    }
    
    // Fall back to type-based template
    if (templates[field.type]) {
        return templates[field.type][0];
    }
    
    // Default
    return `'${field.field} ${index}'`;
}

/**
 * Get mock value for a field
 */
function getMockValue(field, index) {
    const mockData = {
        // Account-specific
        'accountName': [`'Acme Corporation'`, `'Global Industries'`, `'TechStart Solutions'`, `'Regional Services'`, `'Metro Enterprises'`],
        'accountNumber': [`'ACC-001'`, `'ACC-002'`, `'ACC-003'`, `'ACC-004'`, `'ACC-005'`],
        'accountType': [`'Commercial'`, `'Residential'`, `'Commercial'`, `'Industrial'`, `'Residential'`],
        'status': [`'Active'`, `'Active'`, `'Pending'`, `'Active'`, `'On Hold'`],
        
        // Location-specific
        'locationName': [`'Main Office'`, `'Warehouse A'`, `'Branch Office'`, `'Production Site'`, `'Regional HQ'`],
        'address': [`'123 Main Street'`, `'456 Industrial Blvd'`, `'789 Commerce Way'`, `'321 Factory Road'`, `'654 Business Park'`],
        'city': [`'Springfield'`, `'Riverside'`, `'Lakewood'`, `'Mountain View'`, `'Centerville'`],
        'state': [`'CA'`, `'TX'`, `'NY'`, `'FL'`, `'IL'`],
        
        // Generic
        'string': [`'Sample Text ${index + 1}'`],
        'number': [100, 250, 175, 500, 325],
        'boolean': [true, false, true, true, false],
        'date': [`'2024-01-${String(index + 1).padStart(2, "0")}'`]
    };
    
    // Check field-specific data
    if (mockData[field.field]) {
        const values = mockData[field.field];
        return values[index % values.length];
    }
    
    // Check type-specific data
    if (mockData[field.type]) {
        const values = mockData[field.type];
        return values[index % values.length];
    }
    
    // Default
    return `'${field.label} ${index + 1}'`;
}

module.exports = {
    generateMockData
};