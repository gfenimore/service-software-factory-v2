/**
 * Mock Data for AccountList
 * Generated by Prototype Line Generator
 * 2025-08-22T21:02:20.530Z
 */

import { Account } from '../types/AccountListTypes';

// Mock data array
export const mockAccountData: Account[] = [
    {
        accountNumber: 'ACC-001',
        name: 'Sample Text 1',
        type: 'Type 1',
        status: 'Active',
        address: '123 Main Street',
        city: 'Springfield'
    },
    {
        accountNumber: 'ACC-002',
        name: 'Sample Text 2',
        type: 'Type 2',
        status: 'Active',
        address: '456 Industrial Blvd',
        city: 'Riverside'
    },
    {
        accountNumber: 'ACC-003',
        name: 'Sample Text 3',
        type: 'Type 3',
        status: 'Pending',
        address: '789 Commerce Way',
        city: 'Lakewood'
    },
    {
        accountNumber: 'ACC-004',
        name: 'Sample Text 4',
        type: 'Type 4',
        status: 'Active',
        address: '321 Factory Road',
        city: 'Mountain View'
    },
    {
        accountNumber: 'ACC-005',
        name: 'Sample Text 5',
        type: 'Type 5',
        status: 'On Hold',
        address: '654 Business Park',
        city: 'Centerville'
    },
    {
        accountNumber: 'ACC-001',
        name: 'Sample Text 6',
        type: 'Type 6',
        status: 'Active',
        address: '123 Main Street',
        city: 'Springfield'
    },
    {
        accountNumber: 'ACC-002',
        name: 'Sample Text 7',
        type: 'Type 7',
        status: 'Active',
        address: '456 Industrial Blvd',
        city: 'Riverside'
    },
    {
        accountNumber: 'ACC-003',
        name: 'Sample Text 8',
        type: 'Type 8',
        status: 'Pending',
        address: '789 Commerce Way',
        city: 'Lakewood'
    },
    {
        accountNumber: 'ACC-004',
        name: 'Sample Text 9',
        type: 'Type 9',
        status: 'Active',
        address: '321 Factory Road',
        city: 'Mountain View'
    },
    {
        accountNumber: 'ACC-005',
        name: 'Sample Text 10',
        type: 'Type 10',
        status: 'On Hold',
        address: '654 Business Park',
        city: 'Centerville'
    }
];

// Mock data generator function
export function generateAccount(count: number = 10): Account[] {
    const data: Account[] = [];
    
    for (let i = 0; i < count; i++) {
        data.push({
            accountNumber: 'ACC-${String(i + 1).padStart(3, "0")}',
            name: 'Value ${i + 1}',
            type: 'type i',
            status: i % 4 === 0 ? 'Active' : i % 4 === 1 ? 'Pending' : i % 4 === 2 ? 'On Hold' : 'Inactive',
            address: '${100 + i * 10} Main Street',
            city: i % 2 === 0 ? 'Springfield' : 'Riverside'
        });
    }
    
    return data;
}

// Mock API service (simulates backend)
export const accountService = {
    async getAll(): Promise<Account[]> {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(mockAccountData);
            }, 500);
        });
    },
    
    async getById(id: string): Promise<Account | null> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const item = mockAccountData.find(
                    d => (d as any).id === id || (d as any).accountNumber === id
                );
                resolve(item || null);
            }, 300);
        });
    },
    
    async create(data: Partial<Account>): Promise<Account> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const newItem = { ...data } as Account;
                mockAccountData.push(newItem);
                resolve(newItem);
            }, 400);
        });
    },
    
    async update(id: string, data: Partial<Account>): Promise<Account> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mockAccountData.findIndex(
                    d => (d as any).id === id || (d as any).accountNumber === id
                );
                if (index >= 0) {
                    mockAccountData[index] = { ...mockAccountData[index], ...data };
                    resolve(mockAccountData[index]);
                } else {
                    reject(new Error('Not found'));
                }
            }, 400);
        });
    },
    
    async delete(id: string): Promise<void> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mockAccountData.findIndex(
                    d => (d as any).id === id || (d as any).accountNumber === id
                );
                if (index >= 0) {
                    mockAccountData.splice(index, 1);
                    resolve();
                } else {
                    reject(new Error('Not found'));
                }
            }, 300);
        });
    }
};
