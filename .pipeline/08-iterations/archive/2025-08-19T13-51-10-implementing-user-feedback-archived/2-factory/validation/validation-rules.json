{
  "version": "1.0.0",
  "generated": "2025-08-19T10:14:42.667Z",
  "rules": [
    {
      "requirementId": "EVT-001",
      "name": "check_account_selected_event",
      "description": "System must emit account:selected event when account is selected",
      "priority": "mandatory",
      "validationType": "interaction",
      "implementation": "\n                function checkAccountSelectedEvent() {\n                    let eventFired = false;\n                    window.addEventListener('account:selected', () => {\n                        eventFired = true;\n                    });\n                    \n                    // Simulate account selection\n                    // Check if event was fired\n                    \n                    return {\n                        passed: eventFired,\n                        actual: eventFired ? 'Event fired' : 'No event',\n                        expected: 'Event fired',\n                        message: eventFired ?\n                            'PASS: account:selected event fires correctly' :\n                            'FAIL: account:selected event not firing'\n                    };\n                }"
    },
    {
      "requirementId": "EVT-002",
      "name": "check_location_selected_event",
      "description": "System must emit location:selected event when location is selected",
      "priority": "mandatory",
      "validationType": "functional",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    },
    {
      "requirementId": "EVT-003",
      "name": "check_workorder_selected_event",
      "description": "System must emit workOrder:selected event when work order is selected",
      "priority": "mandatory",
      "validationType": "functional",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    },
    {
      "requirementId": "PERF-003",
      "name": "measure_initial_render",
      "description": "Initial render must complete in less than 1 second",
      "acceptance": "Initial render time < 1000ms",
      "priority": "mandatory",
      "validationType": "performance",
      "implementation": "\n                function measureInitialRender() {\n                    const renderTime = performance.timing.loadEventEnd - performance.timing.navigationStart;\n                    return {\n                        passed: renderTime < 1000,\n                        actual: renderTime + 'ms',\n                        expected: '< 1000ms',\n                        message: renderTime < 1000 ?\n                            'PASS: Initial render in ' + renderTime + 'ms' :\n                            'FAIL: Initial render took ' + renderTime + 'ms (max 1000ms allowed)'\n                    };\n                }"
    },
    {
      "requirementId": "PERF-004",
      "name": "measure_column_update",
      "description": "Column updates must complete in less than 200ms",
      "acceptance": "Column update time < 200ms",
      "priority": "mandatory",
      "validationType": "performance",
      "implementation": "\n                function measureColumnUpdate() {\n                    const startTime = performance.now();\n                    // Simulate column update\n                    const endTime = performance.now();\n                    const updateTime = endTime - startTime;\n                    \n                    return {\n                        passed: updateTime < 200,\n                        actual: updateTime + 'ms',\n                        expected: '< 200ms',\n                        message: updateTime < 200 ?\n                            'PASS: Column update in ' + updateTime + 'ms' :\n                            'FAIL: Column update took ' + updateTime + 'ms (max 200ms allowed)'\n                    };\n                }"
    },
    {
      "requirementId": "PERF-005",
      "name": "measure_search_response",
      "description": "Search response must complete in less than 100ms",
      "acceptance": "Search response time < 100ms",
      "priority": "mandatory",
      "validationType": "performance",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    },
    {
      "requirementId": "PERF-006",
      "name": "measure_scroll_fps",
      "description": "Scroll performance must maintain 60 fps",
      "acceptance": "Scroll maintains 60 fps",
      "priority": "progressive",
      "validationType": "performance",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    },
    {
      "requirementId": "NAV-004",
      "name": "count_clicks_to_work_order",
      "description": "Users MUST be able to navigate to any work order in less than 3 clicks",
      "acceptance": "Maximum 3 clicks from page load to any work order",
      "priority": "mandatory",
      "validationType": "interaction",
      "implementation": "\n                function validateThreeClickRule() {\n                    // Track click path from page load to work order selection\n                    let clickCount = 0;\n                    let clickPath = [];\n                    \n                    // Test: Select first account (1 click)\n                    clickCount++;\n                    clickPath.push('account_selected');\n                    \n                    // Test: Select first location (2 clicks)\n                    clickCount++;\n                    clickPath.push('location_selected');\n                    \n                    // Test: Select first work order (3 clicks)\n                    clickCount++;\n                    clickPath.push('workorder_selected');\n                    \n                    return {\n                        passed: clickCount <= 3,\n                        actual: clickCount,\n                        expected: 'â‰¤ 3',\n                        path: clickPath,\n                        message: clickCount <= 3 ? \n                            'PASS: Work order reachable in ' + clickCount + ' clicks' :\n                            'FAIL: Work order requires ' + clickCount + ' clicks (max 3 allowed)'\n                    };\n                }"
    },
    {
      "requirementId": "PERF-008",
      "name": "measure_navigation_time",
      "description": "50% reduction in navigation time",
      "priority": "mandatory",
      "validationType": "performance",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    },
    {
      "requirementId": "PERF-009",
      "name": "measure_interaction_time",
      "description": "All interactions must complete in less than 200ms",
      "priority": "mandatory",
      "validationType": "performance",
      "implementation": "function() { return { passed: false, message: \"Not implemented\" }; }"
    }
  ]
}