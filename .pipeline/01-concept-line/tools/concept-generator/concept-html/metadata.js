/**
 * Metadata Wrapper
 * Adds complete HTML structure and metadata to generated content
 */

/**
 * Wrap content with full HTML structure
 * @param {string} content - Generated HTML content
 * @param {Object} config - Parsed configuration
 * @returns {string} Complete HTML document
 */
function wrapWithMetadata(content, config) {
    const { hierarchy, scope, metadata, entity, layout } = config;
    
    // Build title
    const title = buildTitle(hierarchy, entity, layout);
    
    // Build breadcrumb
    const breadcrumb = buildBreadcrumb(hierarchy);
    
    // Generate complete HTML
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="generator" content="Concept Line Generator v${metadata.generatorVersion}">
    <meta name="generated-at" content="${metadata.generatedAt}">
    <meta name="scope-level" content="${scope.level}">
    <title>${title}</title>
    <style>
        /* Minimal Black & White Styles - Concept Line Principles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: system-ui, -apple-system, sans-serif;
            line-height: 1.6;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }
        
        /* Breadcrumb */
        .breadcrumb {
            font-size: 0.875rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #000;
        }
        
        /* Headers */
        h1 {
            font-size: 1.75rem;
            margin-bottom: 20px;
        }
        
        h2 {
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        
        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        
        caption {
            font-weight: bold;
            margin-bottom: 10px;
            text-align: left;
        }
        
        th, td {
            border: 1px solid #000;
            padding: 8px;
            text-align: left;
        }
        
        th {
            background: #f0f0f0;
            font-weight: bold;
        }
        
        tr:nth-child(even) {
            background: #fafafa;
        }
        
        /* List Styles */
        .entity-list {
            list-style: none;
            margin: 20px 0;
        }
        
        .entity-item {
            border: 1px solid #000;
            padding: 15px;
            margin-bottom: 10px;
        }
        
        /* Definition List Styles */
        dl {
            display: grid;
            grid-template-columns: 200px 1fr;
            gap: 10px;
            margin: 10px 0;
        }
        
        dt {
            font-weight: bold;
            text-align: right;
            padding-right: 10px;
        }
        
        dd {
            padding-left: 10px;
            border-left: 2px solid #ccc;
        }
        
        /* Fieldset Styles */
        fieldset {
            border: 1px solid #000;
            padding: 15px;
            margin: 20px 0;
        }
        
        legend {
            font-weight: bold;
            padding: 0 10px;
        }
        
        .related-entity {
            border-style: dashed;
        }
        
        /* Footer */
        .generator-footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #000;
            font-size: 0.875rem;
            opacity: 0.7;
        }
        
        /* Print Styles */
        @media print {
            body {
                padding: 0;
            }
            .generator-footer {
                page-break-before: always;
            }
        }
    </style>
</head>
<body>
    <!-- Generated by Concept Line Generator -->
    <!-- Configuration Version: ${config.version} -->
    <!-- Generated At: ${metadata.generatedAt} -->
    
    ${breadcrumb}
    
    <h1>${title}</h1>
    
    ${content}
    
    <footer class="generator-footer">
        <p><strong>Generation Metadata</strong></p>
        <dl>
            <dt>Generator:</dt>
            <dd>Concept Line Generator v${metadata.generatorVersion}</dd>
            
            <dt>Generated:</dt>
            <dd>${new Date(metadata.generatedAt).toLocaleString()}</dd>
            
            <dt>Configuration Version:</dt>
            <dd>${config.version}</dd>
            
            <dt>Scope Level:</dt>
            <dd>${scope.level}</dd>
            
            <dt>Primary Entity:</dt>
            <dd>${entity.primary}</dd>
            
            <dt>Layout Type:</dt>
            <dd>${layout.type}</dd>
            
            <dt>Field Count:</dt>
            <dd>${config.fields.length} fields</dd>
        </dl>
    </footer>
</body>
</html>`;
    
    return html;
}

/**
 * Build page title
 * @param {Object} hierarchy - Hierarchy configuration
 * @param {Object} entity - Entity configuration
 * @param {Object} layout - Layout configuration
 * @returns {string} Page title
 */
function buildTitle(hierarchy, entity, layout) {
    const parts = [];
    
    if (hierarchy.userStory) {
        parts.push(hierarchy.userStory.code);
    }
    
    parts.push(entity.primary);
    parts.push(layout.type.charAt(0).toUpperCase() + layout.type.slice(1) + ' View');
    
    return parts.join(' - ');
}

/**
 * Build breadcrumb navigation
 * @param {Object} hierarchy - Hierarchy configuration
 * @returns {string} Breadcrumb HTML
 */
function buildBreadcrumb(hierarchy) {
    const parts = [];
    
    if (hierarchy.application) {
        parts.push(hierarchy.application.name);
    }
    if (hierarchy.module) {
        parts.push(hierarchy.module.name);
    }
    if (hierarchy.subModule) {
        parts.push(hierarchy.subModule.name);
    }
    if (hierarchy.userStory) {
        parts.push(`${hierarchy.userStory.code}: ${hierarchy.userStory.title}`);
    }
    
    return `<nav class="breadcrumb">${parts.join(' â€º ')}</nav>`;
}

module.exports = {
    wrapWithMetadata
};