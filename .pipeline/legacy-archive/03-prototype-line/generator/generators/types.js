/**
 * TypeScript Types Generator
 * Generates type definitions from configuration
 */

/**
 * Generate TypeScript types
 * @param {Object} config - Parsed configuration
 * @returns {string} TypeScript type definitions
 */
function generateTypes(config) {
    const { entityNamePascal, componentName, fields } = config;
    
    return `/**
 * Type Definitions for ${componentName}
 * Generated by Prototype Line Generator
 * ${new Date().toISOString()}
 */

// Entity type
export interface ${entityNamePascal} {
${fields.map(field => `    ${field.fieldCamel}: ${field.tsType};`).join('\n')}
}

// Component props
export interface ${componentName}Props {
    initialData?: ${entityNamePascal}[];
    onRowClick?: (row: ${entityNamePascal}) => void;
    className?: string;
}

// Filter options
export interface ${componentName}FilterOptions {
    searchText?: string;
    ${generateEnumFilters(fields)}
}

// Sort options
export type ${componentName}SortField = keyof ${entityNamePascal};
export type SortDirection = 'asc' | 'desc';

// Pagination options
export interface PaginationOptions {
    currentPage: number;
    pageSize: number;
    totalItems: number;
}

// API Response type (for future use)
export interface ${componentName}ApiResponse {
    data: ${entityNamePascal}[];
    pagination: {
        page: number;
        pageSize: number;
        total: number;
        totalPages: number;
    };
}

// Form type (for create/edit)
export type ${componentName}FormData = Partial<${entityNamePascal}>;

// Status type (if applicable)
${generateStatusEnum(fields)}
`;
}

/**
 * Generate enum filter types
 */
function generateEnumFilters(fields) {
    const enumFields = fields.filter(f => f.type === 'enum');
    if (enumFields.length === 0) return '';
    
    return enumFields.map(field => 
        `${field.fieldCamel}Filter?: string[];`
    ).join('\n    ');
}

/**
 * Generate status enum if status field exists
 */
function generateStatusEnum(fields) {
    const statusField = fields.find(f => f.field === 'status' || f.field === 'accountStatus');
    if (!statusField) return '';
    
    return `export enum ${statusField.entity}Status {
    Active = 'Active',
    Inactive = 'Inactive',
    Pending = 'Pending',
    OnHold = 'On Hold',
    Completed = 'Completed'
}`;
}

module.exports = {
    generateTypes
};