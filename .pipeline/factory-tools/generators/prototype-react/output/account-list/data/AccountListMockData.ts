/**
 * Mock Data for AccountList
 * Generated by Prototype Line Generator
 * 2025-08-22T13:45:26.411Z
 */

import { Account } from '../types/AccountListTypes';

// Mock data array
export const mockAccountData: Account[] = [
    {
        accountName: 'Acme Corporation',
        accountNumber: 'ACC-001',
        accountType: 'Commercial',
        status: 'Active',
        locationName: 'Main Office'
    },
    {
        accountName: 'Global Industries',
        accountNumber: 'ACC-002',
        accountType: 'Residential',
        status: 'Active',
        locationName: 'Warehouse A'
    },
    {
        accountName: 'TechStart Solutions',
        accountNumber: 'ACC-003',
        accountType: 'Commercial',
        status: 'Pending',
        locationName: 'Branch Office'
    },
    {
        accountName: 'Regional Services',
        accountNumber: 'ACC-004',
        accountType: 'Industrial',
        status: 'Active',
        locationName: 'Production Site'
    },
    {
        accountName: 'Metro Enterprises',
        accountNumber: 'ACC-005',
        accountType: 'Residential',
        status: 'On Hold',
        locationName: 'Regional HQ'
    },
    {
        accountName: 'Acme Corporation',
        accountNumber: 'ACC-001',
        accountType: 'Commercial',
        status: 'Active',
        locationName: 'Main Office'
    },
    {
        accountName: 'Global Industries',
        accountNumber: 'ACC-002',
        accountType: 'Residential',
        status: 'Active',
        locationName: 'Warehouse A'
    },
    {
        accountName: 'TechStart Solutions',
        accountNumber: 'ACC-003',
        accountType: 'Commercial',
        status: 'Pending',
        locationName: 'Branch Office'
    },
    {
        accountName: 'Regional Services',
        accountNumber: 'ACC-004',
        accountType: 'Industrial',
        status: 'Active',
        locationName: 'Production Site'
    },
    {
        accountName: 'Metro Enterprises',
        accountNumber: 'ACC-005',
        accountType: 'Residential',
        status: 'On Hold',
        locationName: 'Regional HQ'
    }
];

// Mock data generator function
export function generateAccount(count: number = 10): Account[] {
    const data: Account[] = [];
    
    for (let i = 0; i < count; i++) {
        data.push({
            accountName: 'Company ${i + 1}',
            accountNumber: 'ACC-${String(i + 1).padStart(3, "0")}',
            accountType: i % 3 === 0 ? 'Commercial' : i % 3 === 1 ? 'Residential' : 'Industrial',
            status: i % 4 === 0 ? 'Active' : i % 4 === 1 ? 'Pending' : i % 4 === 2 ? 'On Hold' : 'Inactive',
            locationName: 'Location ${i + 1}'
        });
    }
    
    return data;
}

// Mock API service (simulates backend)
export const accountService = {
    async getAll(): Promise<Account[]> {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(mockAccountData);
            }, 500);
        });
    },
    
    async getById(id: string): Promise<Account | null> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const item = mockAccountData.find(
                    d => (d as any).id === id || (d as any).accountName === id
                );
                resolve(item || null);
            }, 300);
        });
    },
    
    async create(data: Partial<Account>): Promise<Account> {
        return new Promise((resolve) => {
            setTimeout(() => {
                const newItem = { ...data } as Account;
                mockAccountData.push(newItem);
                resolve(newItem);
            }, 400);
        });
    },
    
    async update(id: string, data: Partial<Account>): Promise<Account> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mockAccountData.findIndex(
                    d => (d as any).id === id || (d as any).accountName === id
                );
                if (index >= 0) {
                    mockAccountData[index] = { ...mockAccountData[index], ...data };
                    resolve(mockAccountData[index]);
                } else {
                    reject(new Error('Not found'));
                }
            }, 400);
        });
    },
    
    async delete(id: string): Promise<void> {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const index = mockAccountData.findIndex(
                    d => (d as any).id === id || (d as any).accountName === id
                );
                if (index >= 0) {
                    mockAccountData.splice(index, 1);
                    resolve();
                } else {
                    reject(new Error('Not found'));
                }
            }, 300);
        });
    }
};
