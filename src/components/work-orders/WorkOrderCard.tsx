/**
 * Work Order Card Component
 * Generated by SCAFFOLD-PROCESSOR
 * Purpose: Display individual work order in card format
 */

'use client'

import React from 'react'
import type {
  WorkOrderCardProps,
  WorkOrderStatus,
  WorkOrderPriority,
} from '@/types/workOrder.types'

// Status color mapping
const getStatusColor = (status: WorkOrderStatus): string => {
  const colors = {
    Scheduled: 'bg-gray-100 text-gray-700',
    Assigned: 'bg-blue-100 text-blue-700',
    'In-Progress': 'bg-yellow-100 text-yellow-700',
    Completed: 'bg-green-100 text-green-700',
    Invoiced: 'bg-purple-100 text-purple-700',
  }
  return colors[status] || 'bg-gray-100 text-gray-700'
}

// Priority color mapping
const getPriorityColor = (priority: WorkOrderPriority): string => {
  const colors = {
    Emergency: 'bg-red-500',
    High: 'bg-orange-500',
    Medium: 'bg-blue-500',
    Low: 'bg-gray-300',
  }
  return colors[priority] || 'bg-gray-300'
}

// Format date for display
const formatDate = (dateString: string): string => {
  const date = new Date(dateString)
  const today = new Date()
  const tomorrow = new Date(today)
  tomorrow.setDate(tomorrow.getDate() + 1)

  // Check if date is today
  if (date.toDateString() === today.toDateString()) {
    return 'Today'
  }

  // Check if date is tomorrow
  if (date.toDateString() === tomorrow.toDateString()) {
    return 'Tomorrow'
  }

  // Check if date is in the past
  if (date < today) {
    const daysAgo = Math.floor((today.getTime() - date.getTime()) / (1000 * 60 * 60 * 24))
    if (daysAgo === 1) return 'Yesterday'
    if (daysAgo < 7) return `${daysAgo} days ago`
  }

  // Format as MM/DD/YYYY
  return date.toLocaleDateString('en-US')
}

export function WorkOrderCard({ workOrder, onClick, isSelected = false }: WorkOrderCardProps) {
  // Check if work order is overdue
  const isOverdue = (() => {
    if (workOrder.status === 'Completed' || workOrder.status === 'Invoiced') return false
    const scheduledDate = new Date(workOrder.scheduled_date)
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    return scheduledDate < today
  })()

  return (
    <div
      onClick={onClick}
      className={`
        relative p-4 bg-white rounded-lg border shadow-sm cursor-pointer
        transition-all duration-200 hover:shadow-md
        ${isSelected ? 'ring-2 ring-blue-500 border-blue-500' : 'border-gray-200 hover:border-gray-300'}
        ${isOverdue ? 'bg-red-50' : ''}
      `}
    >
      {/* Header Section */}
      <div className="flex items-start justify-between mb-2">
        <div className="flex-1">
          <div className="flex items-center gap-2">
            <h4 className="font-medium text-gray-900">{workOrder.work_order_number}</h4>
            {isOverdue && (
              <span className="px-2 py-0.5 text-xs font-medium bg-red-100 text-red-700 rounded">
                Overdue
              </span>
            )}
          </div>
          <p className="text-sm text-gray-600 mt-1">{workOrder.type}</p>
        </div>

        {/* Status Badge */}
        <span
          className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(workOrder.status)}`}
        >
          {workOrder.status}
        </span>
      </div>

      {/* Description */}
      {workOrder.description && (
        <p className="text-sm text-gray-700 mb-3 line-clamp-2">{workOrder.description}</p>
      )}

      {/* Details Section */}
      <div className="space-y-1 text-sm">
        {/* Scheduled Date */}
        <div className="flex items-center text-gray-600">
          <span className="font-medium mr-2">Date:</span>
          <span>{formatDate(workOrder.scheduled_date)}</span>
        </div>

        {/* Time Slot */}
        {workOrder.scheduled_time_slot && (
          <div className="flex items-center text-gray-600">
            <span className="font-medium mr-2">Time:</span>
            <span>{workOrder.scheduled_time_slot}</span>
          </div>
        )}

        {/* Technician */}
        {workOrder.technician_name && (
          <div className="flex items-center text-gray-600">
            <span className="font-medium mr-2">Tech:</span>
            <span>{workOrder.technician_name}</span>
          </div>
        )}
      </div>

      {/* Priority Indicator */}
      <div
        className={`absolute left-0 top-0 bottom-0 w-1 rounded-l-lg ${getPriorityColor(workOrder.priority)}`}
      />
    </div>
  )
}

export default WorkOrderCard
