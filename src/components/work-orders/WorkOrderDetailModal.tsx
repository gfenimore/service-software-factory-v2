/**
 * Work Order Detail Modal Component
 * Generated by SCAFFOLD-PROCESSOR
 * Purpose: Display expanded work order details in a modal
 */

'use client'

import React, { useEffect } from 'react'
import type {
  WorkOrderDetailModalProps,
  WorkOrderStatus,
  WorkOrderPriority,
} from '@/types/workOrder.types'
import { StatusBadge, PriorityBadge } from '@/components/ui/StatusBadge'

export function WorkOrderDetailModal({ workOrder, isOpen, onClose }: WorkOrderDetailModalProps) {
  // Handle escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        onClose()
      }
    }

    if (isOpen) {
      document.addEventListener('keydown', handleEscape)
      // Prevent body scroll when modal is open
      document.body.style.overflow = 'hidden'
    }

    return () => {
      document.removeEventListener('keydown', handleEscape)
      document.body.style.overflow = 'unset'
    }
  }, [isOpen, onClose])

  if (!isOpen || !workOrder) return null

  return (
    <>
      {/* Backdrop */}
      <div
        className="fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity"
        onClick={onClose}
      />

      {/* Modal */}
      <div className="fixed inset-0 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-auto">
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-start justify-between">
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  {workOrder.work_order_number}
                </h2>
                <p className="mt-1 text-sm text-gray-600">
                  {workOrder.type} â€¢ {workOrder.status}
                </p>
              </div>
              <button
                onClick={onClose}
                className="ml-4 text-gray-400 hover:text-gray-500 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>
          </div>

          {/* Content */}
          <div className="px-6 py-4">
            {/* Priority and Status */}
            <div className="flex gap-3 mb-6">
              <PriorityBadge
                priority={workOrder.priority as 'Emergency' | 'High' | 'Medium' | 'Low'}
                variant="subtle"
                size="md"
              />
              <StatusBadge
                status={
                  workOrder.status === 'In-Progress' ? 'In Progress' : (workOrder.status as any)
                }
                variant="subtle"
                size="md"
              />
            </div>

            {/* Description */}
            {workOrder.description && (
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Description</h3>
                <p className="text-gray-900">{workOrder.description}</p>
              </div>
            )}

            {/* Schedule Information */}
            <div className="grid grid-cols-2 gap-4 mb-6">
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Scheduled Date</h3>
                <p className="text-gray-900">{workOrder.scheduled_date}</p>
              </div>
              {workOrder.scheduled_time_slot && (
                <div>
                  <h3 className="text-sm font-medium text-gray-700 mb-2">Time Slot</h3>
                  <p className="text-gray-900">{workOrder.scheduled_time_slot}</p>
                </div>
              )}
            </div>

            {/* Technician Information */}
            {workOrder.technician_name && (
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Assigned Technician</h3>
                <p className="text-gray-900">{workOrder.technician_name}</p>
                {workOrder.technician_id && (
                  <p className="text-sm text-gray-600">ID: {workOrder.technician_id}</p>
                )}
              </div>
            )}

            {/* Completion Notes */}
            {workOrder.completion_notes && (
              <div className="mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-2">Completion Notes</h3>
                <p className="text-gray-900 bg-gray-50 p-3 rounded-lg">
                  {workOrder.completion_notes}
                </p>
              </div>
            )}

            {/* Metadata */}
            <div className="pt-4 border-t border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-3">Details</h3>
              <dl className="grid grid-cols-2 gap-3 text-sm">
                <div>
                  <dt className="text-gray-600">Work Order ID</dt>
                  <dd className="text-gray-900 font-mono text-xs">{workOrder.id}</dd>
                </div>
                <div>
                  <dt className="text-gray-600">Location ID</dt>
                  <dd className="text-gray-900 font-mono text-xs">
                    {workOrder.service_location_id}
                  </dd>
                </div>
                <div>
                  <dt className="text-gray-600">Created</dt>
                  <dd className="text-gray-900">
                    {new Date(workOrder.created_at).toLocaleDateString()}
                  </dd>
                </div>
                <div>
                  <dt className="text-gray-600">Last Updated</dt>
                  <dd className="text-gray-900">
                    {new Date(workOrder.updated_at).toLocaleDateString()}
                  </dd>
                </div>
              </dl>
            </div>
          </div>

          {/* Footer */}
          <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 rounded-b-lg">
            <div className="flex justify-end gap-3">
              <button
                onClick={onClose}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
              {/* Future: Add action buttons here (Edit, Reassign, etc.) */}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}

export default WorkOrderDetailModal
