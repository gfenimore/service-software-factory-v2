/**
 * Work Orders List Component
 * Generated by SCAFFOLD-PROCESSOR
 * Purpose: Container component for displaying work orders
 */

'use client'

import React, { useState, useMemo } from 'react'
import type { WorkOrdersListProps, WorkOrder, WorkOrderStatus } from '@/types/workOrder.types'
import { useWorkOrders } from '@/hooks/useWorkOrders'
import { WorkOrderCard } from './WorkOrderCard'
import { WorkOrderDetailModal } from './WorkOrderDetailModal'

export function WorkOrdersList({
  locationId,
  locationName,
  onWorkOrderSelect,
  className = '',
}: WorkOrdersListProps) {
  // State management
  const [selectedWorkOrder, setSelectedWorkOrder] = useState<WorkOrder | null>(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [filterStatus, setFilterStatus] = useState<WorkOrderStatus | 'all'>('all')
  const [searchQuery, setSearchQuery] = useState('')

  // Fetch work orders
  const { workOrders, loading, error, refetch } = useWorkOrders(locationId)

  // Filter and search logic
  const filteredWorkOrders = useMemo(() => {
    let filtered = [...workOrders]

    // Apply status filter
    if (filterStatus !== 'all') {
      filtered = filtered.filter((wo) => wo.status === filterStatus)
    }

    // Apply search
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      filtered = filtered.filter(
        (wo) =>
          wo.work_order_number.toLowerCase().includes(query) ||
          wo.description?.toLowerCase().includes(query) ||
          wo.technician_name?.toLowerCase().includes(query)
      )
    }

    // Sort by priority and date
    filtered.sort((a, b) => {
      // First, check for overdue items
      const aOverdue =
        a.status !== 'Completed' &&
        a.status !== 'Invoiced' &&
        new Date(a.scheduled_date) < new Date()
      const bOverdue =
        b.status !== 'Completed' &&
        b.status !== 'Invoiced' &&
        new Date(b.scheduled_date) < new Date()

      if (aOverdue && !bOverdue) return -1
      if (!aOverdue && bOverdue) return 1

      // Then sort by priority
      const priorityOrder = { Emergency: 0, High: 1, Medium: 2, Low: 3 }
      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority]
      if (priorityDiff !== 0) return priorityDiff

      // Finally by date
      return new Date(a.scheduled_date).getTime() - new Date(b.scheduled_date).getTime()
    })

    return filtered
  }, [workOrders, filterStatus, searchQuery])

  // Event handlers
  const handleCardClick = (workOrder: WorkOrder) => {
    setSelectedWorkOrder(workOrder)
    setIsModalOpen(true)
    onWorkOrderSelect?.(workOrder.id)
  }

  const handleModalClose = () => {
    setIsModalOpen(false)
    setSelectedWorkOrder(null)
  }

  // Render loading state
  if (loading) {
    return (
      <div className={`h-full flex flex-col ${className}`}>
        {/* Header */}
        <div className="flex-shrink-0 p-4 border-b border-gray-200 bg-white">
          <div className="h-6 bg-gray-200 rounded w-32 animate-pulse mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-48 animate-pulse"></div>
        </div>

        {/* Loading skeletons */}
        <div className="flex-1 p-4 space-y-3">
          {[1, 2, 3].map((i) => (
            <div key={i} className="bg-white rounded-lg border border-gray-200 p-4 animate-pulse">
              <div className="flex justify-between mb-3">
                <div className="h-5 bg-gray-200 rounded w-24"></div>
                <div className="h-5 bg-gray-200 rounded-full w-20"></div>
              </div>
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  // Render error state
  if (error) {
    return (
      <div className={`p-4 ${className}`}>
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-700 mb-2">Failed to load work orders</p>
          <button
            onClick={refetch}
            className="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm"
          >
            Retry
          </button>
        </div>
      </div>
    )
  }

  // Render empty state - no location selected
  if (!locationId) {
    return (
      <div className={`h-full flex flex-col ${className}`}>
        {/* Header - Always visible */}
        <div className="flex-shrink-0 p-4 border-b border-gray-200 bg-white">
          <h2 className="text-lg font-semibold text-gray-900">Work Orders</h2>
          <p className="text-sm text-gray-500 mt-1">No location selected</p>
        </div>

        {/* Empty state content */}
        <div className="flex-1 flex flex-col items-center justify-center p-8 text-center">
          <div className="text-gray-400 mb-2">
            <svg
              className="w-12 h-12 mx-auto"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              />
            </svg>
          </div>
          <p className="text-gray-500 text-sm">Select a service location to view work orders</p>
        </div>
      </div>
    )
  }

  // Render main content
  return (
    <div className={`h-full flex flex-col ${className}`}>
      {/* Header */}
      <div className="flex-shrink-0 p-4 border-b border-gray-200 bg-white">
        <h2 className="text-lg font-semibold text-gray-900">Work Orders</h2>
        <p className="text-sm text-gray-500 mt-1">{locationName}</p>
        {/* Stats summary */}
        <div className="flex gap-4 mt-2 text-xs">
          <span className="text-gray-600">
            Total: <span className="font-medium">{workOrders.length}</span>
          </span>
          {workOrders.filter((wo) => wo.priority === 'Emergency').length > 0 && (
            <span className="text-red-600">
              Emergency:{' '}
              <span className="font-medium">
                {workOrders.filter((wo) => wo.priority === 'Emergency').length}
              </span>
            </span>
          )}
          {workOrders.filter((wo) => wo.status === 'In-Progress').length > 0 && (
            <span className="text-yellow-600">
              In Progress:{' '}
              <span className="font-medium">
                {workOrders.filter((wo) => wo.status === 'In-Progress').length}
              </span>
            </span>
          )}
        </div>
      </div>

      {/* Filters */}
      <div className="flex-shrink-0 p-4 bg-gray-50 border-b border-gray-200">
        {/* Search */}
        <input
          type="text"
          placeholder="Search work orders..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
        />

        {/* Status Filter */}
        <div className="mt-3 flex gap-2 flex-wrap">
          <button
            onClick={() => setFilterStatus('all')}
            className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
              filterStatus === 'all'
                ? 'bg-blue-100 text-blue-700'
                : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
            }`}
          >
            All
          </button>
          {['Scheduled', 'Assigned', 'In-Progress', 'Completed'].map((status) => (
            <button
              key={status}
              onClick={() => setFilterStatus(status as WorkOrderStatus)}
              className={`px-3 py-1 text-xs font-medium rounded-full transition-colors ${
                filterStatus === status
                  ? 'bg-blue-100 text-blue-700'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {status}
            </button>
          ))}
        </div>
      </div>

      {/* Work Orders List */}
      <div className="flex-1 overflow-auto p-4">
        {filteredWorkOrders.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <p>No work orders found</p>
            {searchQuery && (
              <button
                onClick={() => setSearchQuery('')}
                className="mt-2 text-sm text-blue-600 hover:text-blue-700"
              >
                Clear search
              </button>
            )}
          </div>
        ) : (
          <div className="space-y-3">
            {filteredWorkOrders.map((workOrder) => (
              <WorkOrderCard
                key={workOrder.id}
                workOrder={workOrder}
                onClick={() => handleCardClick(workOrder)}
                isSelected={selectedWorkOrder?.id === workOrder.id}
              />
            ))}
          </div>
        )}
      </div>

      {/* Detail Modal */}
      <WorkOrderDetailModal
        workOrder={selectedWorkOrder}
        isOpen={isModalOpen}
        onClose={handleModalClose}
      />
    </div>
  )
}

export default WorkOrdersList
